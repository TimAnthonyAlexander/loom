name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks weekly at 2 AM on Sunday
    - cron: '0 2 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code quality and security checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Verify dependencies
      run: |
        go mod verify
        go mod tidy
        git diff --exit-code

    - name: Run go vet
      run: go vet ./...

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Install goimports
      run: go install golang.org/x/tools/cmd/goimports@latest

    - name: Check imports
      run: |
        if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
          echo "Imports are not organized properly:"
          goimports -l .
          exit 1
        fi

  # Testing matrix
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        go-version: [ '1.21', '1.22', '1.23' ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Run tests
      run: go test -v -race -coverprofile='coverage.out' ./...

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # Benchmarks
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...

  # Build artifacts
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Build for multiple platforms
      run: |
        mkdir -p build

        # Linux
        GOOS=linux GOARCH=amd64 go build -o build/loom-linux-amd64 .
        GOOS=linux GOARCH=arm64 go build -o build/loom-linux-arm64 .

        # macOS
        GOOS=darwin GOARCH=amd64 go build -o build/loom-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -o build/loom-darwin-arm64 .

        # Windows
        GOOS=windows GOARCH=amd64 go build -o build/loom-windows-amd64.exe .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: loom-binaries
        path: build/
        retention-days: 7

  # Dependency review for PRs
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
