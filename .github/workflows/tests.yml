name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "0 3 * * 1"  # govulncheck weekly

permissions:
  contents: read
  security-events: write

defaults:
  run:
    shell: bash

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 20

jobs:
  # Build UI once on Linux and reuse everywhere
  frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ui/frontend/package-lock.json

      - name: Install deps
        working-directory: ui/frontend
        run: npm ci

      - name: Build
        working-directory: ui/frontend
        run: npm run build

      - name: Upload UI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ui-dist
          path: ui/frontend/dist
          if-no-files-found: error
          retention-days: 7

  format_vet:
    name: gofmt -s & go vet
    needs: [frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore UI artifact
        uses: actions/download-artifact@v4
        with:
          name: ui-dist
          path: ui/frontend/dist
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      - name: go vet
        run: go vet ./...
      - name: gofmt -s check
        run: |
          files=$(gofmt -l -s .)
          if [ -n "$files" ]; then
            echo "Files need gofmt -s:"
            echo "$files"
            exit 1
          fi

  lint:
    name: golangci-lint
    needs: [frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore UI artifact
        uses: actions/download-artifact@v4
        with:
          name: ui-dist
          path: ui/frontend/dist
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      - uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1
          only-new-issues: true

  tidy_guard:
    name: go mod tidy guard
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      - run: go mod tidy
      - name: Fail if go.mod/go.sum changed
        run: |
          git diff --exit-code -- go.mod go.sum || \
          (echo "Run 'go mod tidy' and commit changes." && exit 1)

  unit_tests_linux:
    name: Go tests (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      - name: Download dependencies
        run: go mod download
      - name: Run tests (internal only)
        run: go test ./internal/... -count=1

  race_coverage:
    name: Go race & coverage
    needs: [frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Restore UI artifact
        uses: actions/download-artifact@v4
        with:
          name: ui-dist
          path: ui/frontend/dist

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Test with -race
        run: go test -race ./... -count=1 -coverprofile=coverage.out

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out

  govulncheck:
    name: govulncheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run govulncheck
        id: govulncheck
        uses: golang/govulncheck-action@v1
        with:
          go-version-file: go.mod
          go-package: ./...
          output-format: sarif
          output-file: govulncheck.sarif
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: govulncheck.sarif

  build:
    name: Build (Go + UI)
    needs: [frontend, format_vet, lint, tidy_guard, unit_tests_linux, race_coverage]
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Restore UI artifact
        uses: actions/download-artifact@v4
        with:
          name: ui-dist
          path: ui/frontend/dist

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Build all packages
        run: go build ./...
