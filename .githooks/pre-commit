#!/usr/bin/env zsh

set -euo pipefail

root="$(git rev-parse --show-toplevel)"
cd "$root"

zmodload zsh/datetime 2>/dev/null || true

RESET=$'\033[0m'
BOLD=$'\033[1m'
DIM=$'\033[2m'
RED=$'\033[31m'
GREEN=$'\033[32m'
YELLOW=$'\033[33m'
CYAN=$'\033[36m'
GRAY=$'\033[90m'

typeset -a SUMMARY
STATUS_OVERALL="passed"

print_hr() { print -r -- "${GRAY}────────────────────────────────────────────────────────────${RESET}"; }
print_title() {
  local proj branch
  proj="${PWD:t}"
  branch="$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo '?')"
  print -r -- "${BOLD}┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓${RESET}"
  print -r -- "${BOLD}┃${RESET} ${BOLD}Pre-commit • ${proj} ${DIM}(${branch})${RESET}"
  print -r -- "${BOLD}┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛${RESET}"
}

need() {
  if ! command -v "$1" >/dev/null 2>&1; then
    print -r -- "${RED}✗ Missing tool:${RESET} $1"
    case "$1" in
      golangci-lint) print -r -- "brew install golangci-lint"; print -r -- "go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest";;
      govulncheck)   print -r -- "go install golang.org/x/vuln/cmd/govulncheck@latest";;
      go)            print -r -- "brew install go";;
    esac
    exit 1
  fi
}

typeset -gF 6 STEP_T0=0
_now() {
  if [[ -n ${EPOCHREALTIME-} ]]; then
    print -r -- "$EPOCHREALTIME"
  else
    print -r -- "$SECONDS"
  fi
}
step_start() {
  STEP_NAME="$1"
  typeset -gF 6 STEP_T0="$(_now)"
  print -r -- "${CYAN}›${RESET} ${BOLD}${STEP_NAME}${RESET}"
}
_elapsed_str() {
  local -F 6 now dt
  now="$(_now)"
  dt=$(( now - STEP_T0 ))
  printf '(%0.2fs)' "$dt"
}
step_ok() {
  print -r -- "  ${GREEN}✓${RESET} ${DIM}${STEP_NAME}${RESET} ${GRAY}$(_elapsed_str)${RESET}"
  SUMMARY+=("${GREEN}✓${RESET} ${STEP_NAME} ${GRAY}$(_elapsed_str)${RESET}")
}
step_skip() {
  local reason="$1"
  print -r -- "  ${YELLOW}•${RESET} ${DIM}${STEP_NAME}${RESET} ${GRAY}[skipped: ${reason}] $(_elapsed_str)${RESET}"
  SUMMARY+=("${YELLOW}•${RESET} ${STEP_NAME} ${GRAY}[skipped: ${reason}] $(_elapsed_str)${RESET}")
}
step_fail() {
  STATUS_OVERALL="failed"
  print -r -- "  ${RED}✗${RESET} ${BOLD}${STEP_NAME}${RESET} ${GRAY}$(_elapsed_str)${RESET}"
  print_summary
  exit 1
}

print_summary() {
  print_hr
  print -r -- "${BOLD}Summary${RESET}"
  for line in "${SUMMARY[@]}"; do print -r -- "  $line"; done
  print_hr
  if [[ "$STATUS_OVERALL" = "passed" ]]; then
    print -r -- "${GREEN}All pre-commit checks passed.${RESET}"
  else
    print -r -- "${RED}Pre-commit checks failed.${RESET}"
  fi
}

print_title

need go
[[ -n "${RUN_VULN:-}" ]] && need govulncheck || true

step_start "gofmt -s"
fmt_out="$(gofmt -l -s .)"
if [[ -n "$fmt_out" ]]; then
  print -r -- "${RED}Files need gofmt -s:${RESET}"
  print -r -- "$fmt_out"
  step_fail
fi
step_ok

step_start "go mod tidy"
go mod tidy
if ! git diff --quiet -- go.mod go.sum; then
  print -r -- "${RED}go.mod/go.sum changed. Run 'go mod tidy' and commit the result.${RESET}"
  git --no-pager diff --minimal --word-diff -- go.mod go.sum || true
  step_fail
fi
step_ok

step_start "go vet ./internal/..."
go vet ./internal/...
step_ok

step_start "golangci-lint (skip ui/)"
if command -v golangci-lint >/dev/null 2>&1; then
  golangci-lint run --timeout=5m --skip-dirs ui
  step_ok
else
  step_skip "golangci-lint not installed"
fi

step_start "go test ./internal/... -count=1"
go test ./internal/... -count=1
step_ok

if [[ -n "${RUN_RACE:-}" ]]; then
  step_start "race detector + coverage"
  go test -race ./internal/... -count=1 -coverprofile=coverage.out
  print -r -- "  ${DIM}coverage → coverage.out${RESET}"
  step_ok
fi

if [[ -n "${RUN_VULN:-}" ]]; then
  step_start "govulncheck ./..."
  govulncheck ./...
  step_ok
fi

print_summary
exit 0
